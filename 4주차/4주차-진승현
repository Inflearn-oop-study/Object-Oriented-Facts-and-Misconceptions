## 객체 지도

추상화 한 구조를 만드는 것이 좀 더 범용적이고 이해하기 쉬우며 변경에 안정적이다.

자주 변경되는 기능에 초점을 맞추는 것이 아닌, 이를 추상화한 구조에 초점을 맞추는 것이 중요하다.

### 기능 설계 대 구조 설계

기능 측면의 설계는 제품이 사용자를 위해 무엇을 할 수 있는지에 초점을 맞춘다.

구조 측면의 설계는 제품의 형태가 어떠해야 하는지에 초점을 맞춘다.

하지만, 사용자를 위한 기능을 만들어뒀다 하더라도, 이대로 끝이 아니라 사용자의 요구사항은 계속해서 바뀌기 마련이다. 그러므로 변경을 수용할 수 있는 선택의 여지를 설계에 남겨두어야 하며, 이에 가장 좋은 방법은 안정적인 구조를 중심으로 설계를 진행하는 것 이다.

객체지향 접근방법을 보더라도, 안정적인 객체 구조를 바탕으로 어떠한 기능을 객체 간의 책임으로 분배한 뒤, 이 기능을 구현한다. 객체, 그리고 메시지를 기반으로 협력 관계를 구축하기 때문에, 변경 사항이 생기더라도 상대적으로 유연하게 대처할 수 있다.

### 두 가지 재료 : 기능과 구조

**구조**는 사용자나 이해관계자들이 도메인에 관해 생각하는 개념과 개념들 간의 관계로 표현되며, **기능**은 사용자의 목표를 만족시키기 위해 책임을 수행하는 시스템의 행위로 표현된다.

모든 소프트웨어는 사용자의 니즈를 만족시키기 위해 존재한다. 사용자가 프로그램을 사용하는 대상 분야를 **도메인** 이라고 하며, 도메인 모델은 곧 이해관계자들이 도메인에 대해 생각하는 관점이자, 사용자가 도메인을 바라보는 관점이며, 설계자가 시스템의 구조를 바라보는 관점인 동시에 소프트웨어 안에 구현된 코드의 모습 그 자체이다.

객체지향을 사용하면 사용자들이 이해하고 있는 도메인의 구조와 최대한 유사하게 코드를 구조화할 수 있다. ( 현실세계를 재창조한 것 이니 )

기능적 요구사항이란 시스템이 사용자에게 제공해야 하는 기능의 목록을 정리한 것 이다.

우리가 만드는 시스템은 사용자의 니즈를 충족시켜줄 의무가 있다. ( 목표 )

사용자의 목표를 달성하기 위해 사용자와 시스템 간에 이뤄지는 상호작용의 흐름을 텍스트로 정리한 것을 **유스케이스** 라고 한다.

유스케이스는 단지 사용자가 바라보는 시스템의 외부 관점만을 표현하며, 시스템의 내부 구조나 실행 메커니즘에 관한 어떤 정보도 제공하지 않는다. ( 사용자 관점 )

### 재료 합치기 : 기능과 구조의 통합

객체를 설계한다는 건 요구사항들을 식별하고 이를 기반으로 도메인 모델을 생성한 후, 요구사항들을 충족시키기 위한 객체들 간의 메시지 전송을 정의한다고 볼 수 있다.

안정적인 도메인 모델을 구축한다라는 것은 현실세계의 사람들의 머릿속에 들어있는 개념을 잘 작성한 것 이고, 이 안정적인 도메인 모델을 기반으로 시스템의 기능을 구현하는 것이 유지보수하기 쉽고 유연한 객체지향 시스템을 만드는 과정이다.

## 함께 모으기

이 챕터에서는 개념 관점, 명세 관점, 구현 관점에 대해 설명하며, 커피 전문점 도메인 예제를 살펴보며 3가지 관점으로 분석한 뒤, 간단한 코드를 작성해보는 과정이다.

물론 여기서도 도메인을 이해하고, 이 도메인을 기반으로 시스템의 기능을 구현하는 것이 핵심이라고 볼 수 있다.

도메인을 이해하고 도메인 간 어떤 메시지를 주고받을 것 인지는, 도메인에 대해 생각해보면 알아서 떠오를 것 이라고 생각한다.

이 과정에서 개념 관점은 커피 전문점 도메인을 구성하는 중요한 개념과 관계에 포커스를 맞추고 있고, 명세 관점은 클래스의 인터페이스, 즉 협력할 수 있는 행동을, 구현 관점은 클래스의 행동이 어떻에 이뤄지는지에 대한 내부 구현에 포커스를 두고 있다.

인터페이스와 구현을 분리해야하는 이유는, 행동과 내부 구현을 분리하는 과정에서 내부 구현이 어떻게 동작하는지 모르더라도 내가 원하는 요청을 받을 수 있어야한다는 점 때문이라고 생각한다.

즉 캡슐화가 잘 이루어졌는지도 역시 중요하지만, 객체 간 어떤 메시지를 주고 받을 것 인지가 더욱 더 중요하다라는 생각이 들었다.

## 느낀점

이 책을 읽고나서 느낀점을 간략하게 남겨보자면, **어떤 메시지를 주고받을 것 인지** 에 대해 고민해야한다라는 점을 많이 느낄 수 있었습니다.

즉 적절한 도메인을 설계한 뒤, 도메인 간 어떤 메시지를 주고 받아야 할지 결정한다면 그에 걸맞는 책임과 행동, 그리고 상태 또한 자연스레 결정된다라고 생각합니다.

이 책을 읽음으로써 설계, 그리고 추상화가 얼마나 중요한지 한번 더 생각해볼 수 있었습니다.
