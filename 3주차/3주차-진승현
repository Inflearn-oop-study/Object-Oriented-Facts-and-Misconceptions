## 4. 역할, 책임, 협력

중요한 점은 객체들 사이에 이뤄지는 협력이다.

객체의 모양을 빚는 것은 객체가 참여하는 협력이며, 어떤 협력에 참여하는지가 객체에 필요한 행동을 결정하고, 필요한 행동이 상태를 결정한다.

### 협력

협력은 다수의 요청과 응답으로 구성된다.

즉 혼자만의 힘으로는 해결하기 어렵기에, 해결하는 과정에서 여러 사람들이 참여하게 된다.

### 책임

요청의 응답을 할 수 있거나 혹은 적절한 행동을 할 의무가 있는 경우, 해당 객체가 책임을 가진다고 한다.

즉 A 라는 객체가 B 라는 객체에게 요청을 보낼 때, 요청을 받는 대상인 B는 A가 보낸 요청을 처리할 책임을 가지게 되는 것 이다.

이처럼 협력에 참여하는 객체들은 목표를 달성하기 위한 책임을 수행해야 하며, 객체의 책임은 객체가 무엇을 알고 있는가 ( knowing, 상태의 확장판 ), 무엇을 할 수 있는가 ( doing, 행동의 확장판 ) 로 구성된다.

### 역할

유사한 협력 관계를 단순화하고 싶을 경우, 역할이란 키워드를 사용하면 협력 관계를 모두 포괄하는 하나의 협력 관계로 추상화할 수 있다.

즉, 역학은 협력 내에서 다른 객체로 대체할 수 있음을 나타내는 일종의 표식이다.

하나의 역할을 맡은 여러 객체들을 협력 관계 내에서 바꾸더라도, 추상화된 협력 관계는 그대로 유지된 채 진행되는 것 이다.

역할을 부여할 때는 객체가 처리할 수 있는 메시지에 초점을 맞춰야 한다.

만약 기존 역할을 맡던 객체와 동일한 메시지를 처리할 수 있는 경우, 해당 객체는 같은 역할로 묶을 수 있다.

결국 객체에 역할을 부여하면 협력 관계를 추상화할 수 있게 되고, 같은 역할을 맡을 수 있는 객체를 바꿔끼울 수 있기 때문에 재사용성이 높아진다.

### 객체의 모양을 결정하는 협력

핵심은 객체가 협력에 잘 참여할 수 있는지, 역할을 잘 수행할 수 있는지를 결정하는 것 이다.

올바른 객체를 설계하기 위해선 협력 관계 ( 요청, 응답 ) 를 잘 설정해야 한다.

### 객체지향 설계 기법

책임 - 주도 설계 : 협력에 필요한 책임들을 식별하고, 적합한 객체에게 책임을 할당하는 방식

디자인 패턴 중, COMPOSITE 패턴 : 하나의 단위로 추상화

테스트 주도 개발 : 테스트를 통과하는 코드를 먼저 작성한 뒤 리팩토링

테스트 주도 개발은 요청과 응답의 과정에서 어떤 결과를 반환하고, 어떤 객체와 협력할 것 인지에 대한 기대를 코드의 형태로 작성한 것 이다.

## 5. 책임과 메시지

역할과 책임이 흐릿할수록, 협력 관계 또한 흐릿해지게 된다. 그러므로 역할과 책임을 명확히 정의할 필요가 있다.

### 자율적인 책임

자율적인 객체란, 스스로 정한 원칙에 따라 판단하고 스스로의 의지를 기반으로 행동하는 객체다.

여기서 행동을 하기 위해선 다른 객체로부터 요청을 받아야만이 행동을 할 수 있기 때문에, 자율적인 객체란 스스로의 의지와 판단에 따라 각자 맡은 책임을 수행하는 객체라고 볼 수 있다.

하지만 요청이 너무 상세할 경우, 요청을 받는 객체의 자율적인 책임을 훼손할 수 있다.

그렇다고 또 너무 추상적일 경우, 의도가 명확하지 않기 때문에 추상적이면서 협력의 의도를 표현할 수 있을 정도로 충분히 구체적이어야 한다.

### 메시지와 메서드

메시지는 메시지 이름과 인자, 두 부분으로 구성된다.

메시지를 전송하는 건 수신자와 메시지의 조합이므로, 결국 메시지 전송은 수신자, 메시지 이름, 인자의 조합이 된다.

이 메시지를 이용해 객체들은 서로 협력하며, 메시지 요청을 통해 다른 객체에게 책임을 요청할 수 있고, 메시지 수신을 통해 자신의 책임을 수행할 수 있다.

이때 어떻게 책임의 의무를 질 것인지는 자율적이며, 메시지의 내용만 만족한다면, 내부 구현은 바뀌더라도 상관이 없다.

메시지가 객체에게 책임을 요청하는 과정이라면, 메소드는 요청을 어떻게 처리할 것 인지에 대한 내용이다. 메시지는 단지 책임을 요청할 뿐, 어떻게 처리해달라고 세부적으로 언급하지는 않는다.

이는 요청받은 객체에서 결정할 문제이며, 어떤 메소드를 실행하여 이 메시지를 응답할지는 수신자의 결정에 좌우된다. ( 다형성 )

송신자는 수신자가 메시지를 처리할 수 있다는 사실만 아는 경우, 설계의 품질에 큰 영향을 미친다.

- 협력이 유연해짐 : 메시지를 처리할 수만 있다면 아무나 와도 상관이 없음
- 협력이 수행되는 방식 확장 가능 : 메시지를 처리할 수 있는 새로운 유형의 객체를 끼워넣을 수 있음
- 협력이 수행되는 방식 재사용 가능 : 다양한 객체들이 수신자의 자리를 대체할 수 있음

### 메시지를 따라라

메시지를 주고받음으로써 객체의 책임이 생성되고, 이 책임을 다하기 위한 행동을 객체 스스로가 만들어낸다고 생각한다. 그래서 객체지향의 중심은 메시지가 위치한다.

### 객체 인터페이스

인터페이스란, 두 사물이 마주치는 경계 지점에서 서로 상호작용할 수 있게 이어주는 방법이나 장치를 의미한다. 객체지향에서도 역시 모든 상호작용은 메시지를 통해 이뤄지며, 이 메시지가 곧 인터페이스가 된다.

### 인터페이스와 구현의 분리

1. 너무 구체적인 인터페이스보다는, 어느정도 추상적인 인터페이스를 설계하는 것이 더 좋다.
2. 객체의 외부와 내부를 분리하라는 말의 뜻은, 결국 인터페이스와 구현 부분을 분리하라는 뜻 이다.

항상 소프트웨어는 변경될 수 있고, 재사용할 수 있기 때문에 인터페이스와 구현을 분리하는 것이 좋다. 변경에 대한 안전지대인 인터페이스를 설계함으로써, 객체는 자율적인 존재가 될 수 있다.

### 책임의 자율성이 협력의 품질을 결정한다

이해하기 쉽고, 변경하기 쉬운 설계가 더 나은 설계라고 이야기한다. 객체의 책임이 자율적일수록 협력이 이해하기 쉬워지고, 유연하게 변경할 수 있게 된다.

결과적으로 책임이 얼마나 자율적인지가 전체적인 협력의 설계 품질을 결정하게 된다.
